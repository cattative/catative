<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>
    {%include "components/pageheader.njk"%}
    {% for imp in dynamics.common.head %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.notes.head %}
      {% include imp %}
    {% endfor %}
    <style>
      .top-menu {
        background-color: var(--background-primary);
        border-bottom: 1px solid var(--background-modifier-border);
        padding: 0 20px;
        z-index: 100;
      }
      
      .top-menu-container {
        margin-left: 16px; /* небольшой отступ от края */
        margin-right: auto;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        height: 40px;
        /* ширина контейнера определяется содержимым */
        width: fit-content;
        min-width: 0;
      }
      
      .top-menu-brand {
        flex-shrink: 0;
      }
      
      .brand-link {
        color: var(--text-accent);
        text-decoration: none;
        font-weight: bold;
        font-size: 18px;
        padding: 8px 16px;
        border-radius: 4px;
        transition: none;
        white-space: nowrap;
      }

      .top-menu-nav {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 8px;
        /* ширина определяется кнопками */
        width: auto;
        min-width: 0;
      }
      
      .top-menu-item {
        color: var(--text-normal);
        text-decoration: none;
        padding: 8px 16px;
        border-radius: 4px;
        transition: background-color 0.2s, color 0.2s;
        font-weight: 500;
        white-space: nowrap;
        flex: 0 1 auto; /* подстраиваются под содержимое */
      }
      
      .top-menu-item:hover {
        background-color: var(--background-modifier-hover);
        color: var(--text-accent);
      }
      
      .top-menu-item.active {
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
      }

/* Music Player Styles */
      .music-player-container {
        position: fixed;
        bottom: 20px;
        left: 20px;
        background: var(--background-primary);
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        width: 300px;
        border: 1px solid var(--background-modifier-border);
      }

      .music-player {
        width: 100%;
      }

      .player-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 10px;
      }

      .song-info {
        margin-bottom: 8px;
        font-size: 14px;
        color: var(--text-normal);
      }

      .song-title {
        font-weight: bold;
        margin-bottom: 4px;
      }

      .playlist-container {
        max-height: 150px;
        overflow-y: auto;
        margin-top: 10px;
        border-top: 1px solid var(--background-modifier-border);
        padding-top: 10px;
      }

      .playlist-item {
        padding: 8px;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.2s;
      }

      .playlist-item:hover {
        background-color: var(--background-modifier-hover);
      }

      .playlist-item.active {
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
      }

      /* Custom audio player styling */
      .custom-audio {
        width: 100%;
        height: 5px;
        margin-top: 10px;
      }

      .custom-audio::-webkit-slider-thumb {
        -webkit-appearance: none;
        height: 12px;
        width: 12px;
        border-radius: 50%;
        background: var(--interactive-accent);
        cursor: pointer;
        margin-top: -4px;
      }

      .custom-audio::-webkit-slider-runnable-track {
        width: 100%;
        height: 4px;
        background: var(--background-modifier-border);
        border-radius: 2px;
      }

      .volume-control {
        display: flex;
        align-items: center;
        gap: 5px;
      }

      .volume-slider {
        width: 60px;
      }
      /* Адаптивность для мобильных устройств */
      @media (max-width: 768px) {
        .top-menu-container {
          margin-left: 8px;
          height: auto;
          padding: 10px 0;
          width: 100%;
        }
        
        .top-menu-nav {
          gap: 10px;
        }
        
        .top-menu-item {
          padding: 6px 12px;
          font-size: 14px;
        }

        .brand-link {
          font-size: 16px;
        }
        
        .back-button {
          bottom: 20px;
          right: 20px;
          width: 45px;
          height: 45px;
          font-size: 18px;
        }
      }
    </style>
  </head>
  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">
    {%include "components/notegrowthhistory.njk"%}
  
    <!-- Верхнее меню с категориями -->
    <nav class="top-menu">
      <div class="top-menu-container">
        <!-- Кнопка catative's bank слева -->
        <div class="top-menu-brand">
          <a href="/" class="brand-link">catative's bank</span>
        </div>
        
        <div class="top-menu-nav">
          <a href="/notes" class="top-menu-item">Notes</a>
          <a href="/works" class="top-menu-item">Works</a>
        </div>
      </div>
</nav>

    {% if settings.dgShowFileTree !== true %}
      {%include "components/navbar.njk"%}
    {%else%}
      {%include "components/filetree.njk"%}
    {% endif %}

    {% if settings.dgEnableSearch === true %}
      {%include "components/searchContainer.njk"%}
    {% endif %}

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header>
        {% if settings.dgShowInlineTitle === true %}
          <h1 data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</h1>
        {% endif %}
        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag !='note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">
                    #{{tag}}
                  </a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}
          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>
      {% for imp in dynamics.common.header %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.header %}
        {% include imp %}
      {% endfor %}
      </header>
      {% for imp in dynamics.common.beforeContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.beforeContent %}
        {% include imp %}
      {% endfor %}
      {{ content | hideDataview | taggify | link | safe}}
      {% for imp in dynamics.common.afterContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.afterContent %}
        {% include imp %}
      {% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true%}
      {%include "components/sidebar.njk"%}
    {% endif %}

    {% if settings.dgLinkPreview === true %}
      {%include "components/linkPreview.njk"%}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.notes.footer %}
      {% include imp %}
    {% endfor %}
    {%include "components/lucideIcons.njk"%}

    <!-- Add the music player before the closing body tag -->
    <div class="music-player-container">
      <div class="song-info">
        <div class="song-title">Now Playing: </div>
        <div class="song-artist"></div>
      </div>
      <div class="player-controls">
        <button id="prevButton" onclick="previousTrack()">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polygon points="19 20 9 12 19 4 19 20"></polygon>
            <line x1="5" y1="19" x2="5" y2="5"></line>
          </svg>
        </button>
        <button id="playPauseButton" onclick="togglePlay()">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polygon points="5 3 19 12 5 21 5 3"></polygon>
          </svg>
        </button>
        <button id="nextButton" onclick="nextTrack()">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polygon points="5 4 15 12 5 20 5 4"></polygon>
            <line x1="19" y1="5" x2="19" y2="19"></line>
          </svg>
        </button>
        <div class="volume-control">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
            <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
          </svg>
          <input type="range" class="volume-slider custom-audio" min="0" max="1" step="0.1" value="1" onchange="setVolume(this.value)">
        </div>
      </div>
      <input type="range" class="custom-audio" id="seekBar" value="0" step="1">
      <div class="playlist-container" id="playlist">
        <!-- Playlist items will be inserted here -->
      </div>
    </div>

    <script>
      const playlist = [
        {
          title: "Zemlya",
          artist: "Dakha Brakha",
          url: "/assets/music/Zemlya.mp3"
        },
        {
          title: "Song 2",
          artist: "Artist 2",
          url: "/assets/music/song2.mp3"
        }
        // Add more songs as needed
      ];

      let currentTrackIndex = 0;
      let isPlaying = false;
      const audio = new Audio();
      
      // Initialize player
      function initPlayer() {
        // Create playlist items
        const playlistContainer = document.getElementById('playlist');
        playlist.forEach((song, index) => {
          const item = document.createElement('div');
          item.className = 'playlist-item';
          item.textContent = `${song.title} - ${song.artist}`;
          item.onclick = () => playTrack(index);
          playlistContainer.appendChild(item);
        });

        // Set up audio event listeners
        audio.addEventListener('timeupdate', updateSeekBar);
        audio.addEventListener('ended', () => nextTrack());
        
        // Initialize first track
        updateTrackInfo();
      }

      function updateTrackInfo() {
        const song = playlist[currentTrackIndex];
        document.querySelector('.song-title').textContent = `Now Playing: ${song.title}`;
        document.querySelector('.song-artist').textContent = song.artist;
        audio.src = song.url;
        
        // Update playlist highlighting
        document.querySelectorAll('.playlist-item').forEach((item, index) => {
          item.classList.toggle('active', index === currentTrackIndex);
        });
      }

      function togglePlay() {
        if (isPlaying) {
          audio.pause();
        } else {
          audio.play();
        }
        isPlaying = !isPlaying;
        updatePlayButton();
      }

      function updatePlayButton() {
        const button = document.getElementById('playPauseButton');
        button.innerHTML = isPlaying ? 
          '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect></svg>' :
          '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg>';
      }

      function playTrack(index) {
        currentTrackIndex = index;
        updateTrackInfo();
        audio.play();
        isPlaying = true;
        updatePlayButton();
      }

      function nextTrack() {
        currentTrackIndex = (currentTrackIndex + 1) % playlist.length;
        playTrack(currentTrackIndex);
      }

      function previousTrack() {
        currentTrackIndex = (currentTrackIndex - 1 + playlist.length) % playlist.length;
        playTrack(currentTrackIndex);
      }

      function updateSeekBar() {
        const seekBar = document.getElementById('seekBar');
        seekBar.max = audio.duration;
        seekBar.value = audio.currentTime;
      }

      function setVolume(value) {
        audio.volume = value;
      }

      // Initialize the player when the page loads
      document.addEventListener('DOMContentLoaded', initPlayer);
    </script>

    <script>
      // Скрипт для выделения активного пункта меню
      document.addEventListener('DOMContentLoaded', function() {
        const menuItems = document.querySelectorAll('.top-menu-item');
        const currentPath = window.location.pathname;
        
        menuItems.forEach(item => {
          if (item.getAttribute('href') === currentPath || 
              (currentPath !== '/' && item.getAttribute('href') !== '/' && currentPath.startsWith(item.getAttribute('href')))) {
            item.classList.add('active');
          }
        });
      });
    </script>
  </body>
</html>
